function cleanup

%written by DP - last update 26/03/07
%screens events generated by MIA according to various criteria (see code)
%and generates a .trc file with the events passing the screen
%generates also a summary excel file where all the parameters and results
%are written

%This function works with the two types of trc files: with or without 
%the '0' lines. It will write the '0' lines if they were present.

[f,p] = uigetfile('*.txt;*.trc','File with matrix of events');
if ~f,return,end
events = dlmread([p,f],'\t');
cellNum = f(1:4); %the number of the cell analysed
[stk,stkd] = uigetfile('*.stk','Choose a Stack');
if ~stk,return,end
movi = stkread(stk,stkd);
moviLength = size(movi,3);
output = zeros(size(events));

rCircle = 3;
rAnnulus = 6;
Edge = 13;
sigNoise = 2;
slopeMax = 0.1;
minFrame = 20; % Number of frames before the event
%It has to be bigger than 5 
%(the number of frames used to estimate local background)
maxFrame = 20;
defaults = [rCircle,rAnnulus,Edge,sigNoise,slopeMax,minFrame,maxFrame];
prompt = {'Circle radius','Annulus outer radius',...
    'Minimal distance from the edge of the image',...
    'Signal/Noise ratio',...
    'Maximum slope for fluorescence increase',...
    'Minimal number of frames before event',...
    'Minimal number of frames after start of event'};
[rCircle,rAnnulus,Edge,sigNoise,slopeMax,minFrame,maxFrame] = ...
numinputdlg(prompt,'Parameters for removing non qualified events',1,defaults);
pause(1)
params = [rCircle,rAnnulus,Edge,sigNoise,slopeMax,minFrame,maxFrame];
[x,y] = meshgrid(1:size(movi,2),1:size(movi,1));
k = 1; %token for the output matrix
r = 1; %token for the reject matrix
a = 1; %token for the accept matrix 
firstEvent = round(events(2,1));
lastEvent = round(events(end,1));
reject = zeros(lastEvent,12);
accept = zeros(lastEvent,7);
for i=firstEvent:lastEvent
    eventTrack = (events(:,1)==i);
    [u,start] = max(eventTrack);
    if u
    if (events(start,2) > minFrame)
    if (events(start,2) < moviLength-maxFrame)
        if (Edge < events(start,3))...
            && (events(start,3) < (size(movi,1)-Edge))...
            && (Edge < events(start,4))...
            && (events(start,4) < (size(movi,2)-Edge))
%Conditions: The object appears after minFrame frames 
%and is more than Edge pixels from the edge of the image
        if ~(events(1,1)==0)|((events(1,1)==0) & (events(start-1,3) == 0))
%Condition: if it is coded (0 lines), the object is not merge/split from
%parent objects
        frame = round(events(start,2));
        length = sum(eventTrack);
        if length >= 3
%A condition that is normally always fullfilled
%since MIA uses a minimum of 3 frames to define an event
%but in fact there can be events with less than 3 if they lead to or come from
%a merge/split
%Warning: these events will disappear from the excel summary file
%Calculates the slope
            distance1 = sqrt((x-events(start,3)).^2 +...
                (y-events(start,4)).^2);
            distance3 = sqrt((x-events(start+2,3)).^2 +...
                (y-events(start+2,4)).^2);
            circle1 = distance1<rCircle;
            annulus1 = (distance1>=rCircle)&(distance1<rAnnulus);
            circle3 = distance3<rCircle;
            annulus3 = (distance3>=rCircle)&(distance3<rAnnulus);
            im1 = double(movi(:,:,frame));
            im3 = double(movi(:,:,frame+2));
            av1 = sum(sum(im1.*circle1))/sum(sum(circle1)) -...
                sum(sum(im1.*annulus1))/sum(sum(annulus1));
            av3 = sum(sum(im3.*circle3))/sum(sum(circle3)) -...
                sum(sum(im3.*annulus3))/sum(sum(annulus3));
                slope = 0.5*(av3/av1-1);
%Condition: the spot does not get brighter after appearance
%(as an approaching object would do)
            if slope < slopeMax
%Calculates the background over 5 frames preceding the event
                imbefore = double(movi(:,:,frame-5:frame-1));
                circle0 = circle1(:,:,ones(1,5));
                annulus0 = annulus1(:,:,ones(1,5));
                avbefore = sum(sum(imbefore.*circle0))/sum(sum(circle1))-...
                  sum(sum(imbefore.*annulus0))/sum(sum(annulus1));
                average = sum(avbefore)./5;
                stdev = sqrt(sum((average-avbefore).^2))./2;
 %The last condition: fluo of object above background
                if av1 > (average + sigNoise*stdev)
                   if events(1,1) == 0
                       start = start-1;length = length+1;
                   end
                   output(k:k+length-1,:) = events(start:start+length-1,:);
                    k = k+length;
                    accept(a,1) = i;
                    accept(a,2) = a;
                    accept(a,3:7) = events(start+1,2:6);
                    a = a+1;
                else reject(r,1:6) = events(start,:); %rejection: S/N is too low
                    reject(r,11) = 1;
                    r = r+1;
                end
            else reject(r,1:6) = events(start,:); %rejection: slope is positive
                reject(r,10) = 1;
                r = r+1;
            end
        end
        else reject(r,1:6) = events(start,:); %rejection: event is a merge/split
            reject(r,12) = 1;
            r = r+1;
        end
        else reject(r,1:6) = events(start,:); %rejection: event is close to an edge
            reject(r,9) = 1;
            r = r+1;
        end
    else reject(r,1:6) = events(start,:); %rejection: event is too late
        reject(r,8) = 1;
        r = r+1;
    end
    else reject(r,1:6) = events(start,:);
        reject(r,7) = 1; %rejection: event is too early
        r = r+1;
    end
    end
end

output = output(1:k-1,:);
reject = reject(1:r-1,:);
sumReject = sum(reject);
counts = [(r+a-2);sumReject(7:12)';(a-1)];
accept = accept(1:a-1,:);

[fle,p] = uiputfile([f(1:end-4),'_cln.trc']...
      ,'Where to put the cleaned up event file');
  
if ischar(fle)&ischar(p)
   dlmwrite([p,fle],output,'\t')
end

[fexcel,p] = uiputfile([cellNum,'_data.xls'],...
    'Where to put the excel data file');

if ischar(fexcel)&&ischar(p)
    warning off MATLAB:xlswrite:AddSheet
    sheet = [cellNum,' summary'];
    xlswrite([p,fexcel],{'exp type:'},sheet,'A1')
    xlswrite([p,fexcel],{'analysis:'},sheet,'A3')
    xlswrite([p,fexcel],...
        {'rCircle';'rAnnulus';'Edge';'S/N';'(+)slope';'fr_bef';'fr_aft'},...
        sheet,'A10')
    xlswrite([p,fexcel],params',sheet,'C10')
    xlswrite([p,fexcel],...
        {'total events:';'failed frbef:';'failed fraft:';'failed edges:'},...
        sheet,'E10')
    xlswrite([p,fexcel],...
        {'failed slope:';'failed S/N:';'failed merge:';'passed:'},...
        sheet,'E14')
    xlswrite([p,fexcel],counts,sheet,'G10')
    xlswrite([p,fexcel],{'passed events'},sheet,'A19')
    xlswrite([p,fexcel],{'trk id','event id','fr','x','y','u','v'},...
        sheet,'A20')
    xlswrite([p,fexcel],accept,sheet,'A21')
    xlswrite([p,fexcel],{'failed events'},sheet,'I19')
    xlswrite([p,fexcel],{'trk id','fr','x','y','u','v'},sheet,'I20')
    xlswrite([p,fexcel],{'frbef','fraft','edges','(+)slope','S/N','merge'},...
        sheet,'O20')
    xlswrite([p,fexcel],reject,sheet,'I21')
end